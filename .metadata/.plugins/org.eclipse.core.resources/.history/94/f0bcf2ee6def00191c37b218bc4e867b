package com.chagu4developers.restservice.contoller;

import java.util.ArrayList;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.BeanUtils;
import org.springframework.context.annotation.Import;
import org.springframework.hateoas.Link;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;

import com.chagu4developers.restservice.dto.UserDto;
import com.chagu4developers.restservice.exception.ErrorMessages;
import com.chagu4developers.restservice.exception.UserServiceException;
import com.chagu4developers.restservice.model.request.UserDetailsRequest;
import com.chagu4developers.restservice.model.response.OperationName;
import com.chagu4developers.restservice.model.response.OperationStatus;
import com.chagu4developers.restservice.model.response.OperationStatusResponse;
import com.chagu4developers.restservice.model.response.UserDetailsResponse;
import com.chagu4developers.restservice.service.UserService;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/user")
@RequiredArgsConstructor
public class UserController {

	@NonNull
	private final UserService userService;

	@GetMapping("/")
	public String getFirstPage() {
		return "This Is First PAge !!!";
	}

	@GetMapping(path = "/{userId}", produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })
	public UserDetailsResponse getUser(@PathVariable String userId) {
		UserDetailsResponse responseUser = new UserDetailsResponse();
		UserDto savedUser = userService.getUserDtoByUserId(userId);
		BeanUtils.copyProperties(savedUser, responseUser);
		return responseUser;
	}

	@PostMapping(path = "/saveUser", consumes = { MediaType.APPLICATION_XML_VALUE,
			MediaType.APPLICATION_JSON_VALUE }, produces = { MediaType.APPLICATION_XML_VALUE,
					MediaType.APPLICATION_JSON_VALUE })
	public UserDetailsResponse createUser(@RequestBody UserDetailsRequest userDetails) {
		if (userDetails.getEmail().isEmpty())
			throw new UserServiceException(ErrorMessages.MISSING_REQUIRED_FIELD.getErrorMessage());
		UserDetailsResponse responseUser = new UserDetailsResponse();
		ModelMapper mapper = new ModelMapper();
		UserDto dto = mapper.map(userDetails, UserDto.class);
		UserDto savedUserDto = userService.createNewUser(dto);
		responseUser = mapper.map(savedUserDto, UserDetailsResponse.class);
		Link link = linkTo(UserController.class).slash("saveUser").withSelfRel();
		responseUser.add(link);
		return responseUser;
	}

	@PutMapping(path = "/update/{userId}", consumes = { MediaType.APPLICATION_XML_VALUE,
			MediaType.APPLICATION_JSON_VALUE }, produces = { MediaType.APPLICATION_XML_VALUE,
					MediaType.APPLICATION_JSON_VALUE })
	public UserDetailsResponse updateUser(@PathVariable String userId, @RequestBody UserDetailsRequest userDetails) {
		UserDetailsResponse responseUser = new UserDetailsResponse();
		UserDto dto = new UserDto();
		BeanUtils.copyProperties(userDetails, dto);
		UserDto updatedUserDto = userService.updateUser(userId, dto);
		BeanUtils.copyProperties(updatedUserDto, responseUser);
		return responseUser;
	}

	@DeleteMapping(path = "/delete/{userId}", produces = { MediaType.APPLICATION_XML_VALUE,
			MediaType.APPLICATION_JSON_VALUE })
	public OperationStatusResponse deleteUser(@PathVariable String userId) {
		userService.deleteUser(userId);
		OperationStatusResponse returnValue = new OperationStatusResponse(OperationStatus.SUCCESS.name(),
				OperationName.DELETE.name());
		return returnValue;
	}

	@GetMapping(path = "/allUsers", produces = MediaType.APPLICATION_JSON_VALUE)
	public List<UserDetailsResponse> getAllUsers(@RequestParam(value = "page", defaultValue = "1") Integer page,
			@RequestParam(value = "limit", defaultValue = "25") Integer limit) {
		List<UserDetailsResponse> returnValue = new ArrayList<>();
		List<UserDto> usersDto = userService.getAllUser(page, limit);
		usersDto.forEach(dto -> {
			UserDetailsResponse responseUser = new UserDetailsResponse();
			BeanUtils.copyProperties(dto, responseUser);
			returnValue.add(responseUser);
		});
		return returnValue;
	}
}
